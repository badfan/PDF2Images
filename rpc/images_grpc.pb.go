// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/images.proto

package rpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PDF2ImagesServiceClient is the client API for PDF2ImagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDF2ImagesServiceClient interface {
	ConvertPDF2Images(ctx context.Context, opts ...grpc.CallOption) (PDF2ImagesService_ConvertPDF2ImagesClient, error)
}

type pDF2ImagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDF2ImagesServiceClient(cc grpc.ClientConnInterface) PDF2ImagesServiceClient {
	return &pDF2ImagesServiceClient{cc}
}

func (c *pDF2ImagesServiceClient) ConvertPDF2Images(ctx context.Context, opts ...grpc.CallOption) (PDF2ImagesService_ConvertPDF2ImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PDF2ImagesService_ServiceDesc.Streams[0], "/proto.PDF2ImagesService/ConvertPDF2Images", opts...)
	if err != nil {
		return nil, err
	}
	x := &pDF2ImagesServiceConvertPDF2ImagesClient{stream}
	return x, nil
}

type PDF2ImagesService_ConvertPDF2ImagesClient interface {
	Send(*ConvertPDF2ImagesRequest) error
	CloseAndRecv() (*EmptyResponse, error)
	grpc.ClientStream
}

type pDF2ImagesServiceConvertPDF2ImagesClient struct {
	grpc.ClientStream
}

func (x *pDF2ImagesServiceConvertPDF2ImagesClient) Send(m *ConvertPDF2ImagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDF2ImagesServiceConvertPDF2ImagesClient) CloseAndRecv() (*EmptyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDF2ImagesServiceServer is the server API for PDF2ImagesService service.
// All implementations must embed UnimplementedPDF2ImagesServiceServer
// for forward compatibility
type PDF2ImagesServiceServer interface {
	ConvertPDF2Images(PDF2ImagesService_ConvertPDF2ImagesServer) error
	mustEmbedUnimplementedPDF2ImagesServiceServer()
}

// UnimplementedPDF2ImagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPDF2ImagesServiceServer struct {
}

func (UnimplementedPDF2ImagesServiceServer) ConvertPDF2Images(PDF2ImagesService_ConvertPDF2ImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertPDF2Images not implemented")
}
func (UnimplementedPDF2ImagesServiceServer) mustEmbedUnimplementedPDF2ImagesServiceServer() {}

// UnsafePDF2ImagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDF2ImagesServiceServer will
// result in compilation errors.
type UnsafePDF2ImagesServiceServer interface {
	mustEmbedUnimplementedPDF2ImagesServiceServer()
}

func RegisterPDF2ImagesServiceServer(s grpc.ServiceRegistrar, srv PDF2ImagesServiceServer) {
	s.RegisterService(&PDF2ImagesService_ServiceDesc, srv)
}

func _PDF2ImagesService_ConvertPDF2Images_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDF2ImagesServiceServer).ConvertPDF2Images(&pDF2ImagesServiceConvertPDF2ImagesServer{stream})
}

type PDF2ImagesService_ConvertPDF2ImagesServer interface {
	SendAndClose(*EmptyResponse) error
	Recv() (*ConvertPDF2ImagesRequest, error)
	grpc.ServerStream
}

type pDF2ImagesServiceConvertPDF2ImagesServer struct {
	grpc.ServerStream
}

func (x *pDF2ImagesServiceConvertPDF2ImagesServer) SendAndClose(m *EmptyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDF2ImagesServiceConvertPDF2ImagesServer) Recv() (*ConvertPDF2ImagesRequest, error) {
	m := new(ConvertPDF2ImagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDF2ImagesService_ServiceDesc is the grpc.ServiceDesc for PDF2ImagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDF2ImagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PDF2ImagesService",
	HandlerType: (*PDF2ImagesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertPDF2Images",
			Handler:       _PDF2ImagesService_ConvertPDF2Images_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/images.proto",
}
